

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.TaskStackBuilder;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;

import com.edelivery.CourierTrackActivity;
import com.edelivery.LoginActivity;
import com.edelivery.OrderTrackActivity;
import com.edelivery.R;
import com.edelivery.models.responsemodels.IsSuccessResponse;
import com.edelivery.models.responsemodels.PushDataResponse;
import com.edelivery.parser.ApiClient;
import com.edelivery.parser.ApiInterface;
import com.edelivery.parser.ParseContent;
import com.edelivery.utils.AppLog;
import com.edelivery.utils.Const;
import com.edelivery.utils.PreferenceHelper;
import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;
import com.google.gson.Gson;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Map;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;


public class FcmMessagingService extends FirebaseMessagingService {

    public static final String MESSAGE = "message";
    public static final String LOGIN_IN_OTHER_DEVICE = "2091";
    public static final String STORE_ACCEPTED_YOUR_ORDER = "2001";
    public static final String STORE_START_PREPARING_YOUR_ORDER = "2002";
    public static final String STORE_READY_YOUR_ORDER = "2003";
    public static final String STORE_REJECTED_YOUR_ORDER = "2004";
    public static final String STORE_CANCELLED_YOUR_ORDER = "2005";
    public static final String DELIVERY_MAN_ACCEPTED = "2081";
    public static final String DELIVERY_MAN_COMING = "2082";
    public static final String DELIVERY_MAN_ARRIVED = "2083";
    public static final String DELIVERY_MAN_PICKED_ORDER = "2084";
    public static final String DELIVERY_MAN_STARTED_DELIVERY = "2085";
    public static final String DELIVERY_MAN_ARRIVED_AT_DESTINATION = "2086";
    public static final String DELIVERY_MAN_COMPLETE_ORDER = "2087";
    public static final String ADMIN_APPROVED = "2006";
    public static final String ADMIN_DECLINE = "2007";
    private static final String CHANNEL_ID = "channel_01";


    private Map<String, String> data;


    @Override
    public void onMessageReceived(RemoteMessage remoteMessage) {


        if (remoteMessage != null) {

            AppLog.Log("FcmMessagingService", "From:" + remoteMessage.getFrom());
            AppLog.Log("FcmMessagingService", "Data:" + remoteMessage.getData());

            data = remoteMessage.getData();
            String message = data.get(MESSAGE);
            if (!TextUtils.isEmpty(message)) {
                orderStatus(message);
            }
        }

    }

    private void sendNotification(String message, int activityId) {
        int notificationId = 2017;
        Intent intent = null;
        switch (activityId) {
            case Const.HOME_ACTIVITY:
                intent = getPackageManager().getLaunchIntentForPackage
                        (getPackageName());

                if (intent != null) {
                    intent.setFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
                }
                break;
            case Const.LOGIN_ACTIVITY:
                intent = new Intent(this, LoginActivity.class);
                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK |
                        Intent.FLAG_ACTIVITY_CLEAR_TASK);
                break;
            case Const.ORDER_TRACK_ACTIVITY:
                PushDataResponse pushDataResponse = new Gson().fromJson(data.get(Const.Params
                        .PUSH_DATA1), PushDataResponse
                        .class);
                if (pushDataResponse.getDeliveryType() == Const.DeliveryType.COURIER) {
                    intent = new Intent(this, CourierTrackActivity.class);
                } else {
                    intent = new Intent(this, OrderTrackActivity.class);
                }
                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK |
                        Intent.FLAG_ACTIVITY_CLEAR_TASK);
                intent.putExtra(Const.Params.PUSH_DATA1, data.get(Const.Params
                        .PUSH_DATA1));
                break;
            default:
                // do with default
                break;
        }

        NotificationManager notificationManager =
                (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            CharSequence name = getString(R.string.app_name);
            NotificationChannel mChannel = new NotificationChannel(CHANNEL_ID, name,
                    NotificationManager.IMPORTANCE_DEFAULT);
            if (notificationManager != null) {
                notificationManager.createNotificationChannel(mChannel);
            }
        }


        TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
        stackBuilder.addParentStack(LoginActivity.class);
        stackBuilder.addNextIntent(intent);
        PendingIntent notificationPendingIntent =
                stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);


        final Notification.Builder notificationBuilder = new Notification.Builder
                (this).setPriority(Notification.PRIORITY_MAX).setContentTitle(this.getResources().getString(R.string
                .app_name)).setContentText(message).setAutoCancel(true).setSmallIcon(getNotificationIcon()).setContentIntent(notificationPendingIntent);


        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            notificationBuilder.setChannelId(CHANNEL_ID); // Channel ID
        }
        if (PreferenceHelper.getInstance(this).getIsPushNotificationSoundOn()) {
            notificationBuilder.setDefaults(Notification.DEFAULT_SOUND
                    | Notification.DEFAULT_LIGHTS);
        } else {
            notificationBuilder.setDefaults(Notification.DEFAULT_SOUND
                    | Notification.DEFAULT_LIGHTS);
        }
        if (notificationManager != null) {
            notificationManager.notify(notificationId, notificationBuilder
                    .build());
        }
    }

    private int getNotificationIcon() {
        boolean useWhiteIcon = (android.os.Build.VERSION.SDK_INT >= android.os.Build
                .VERSION_CODES.LOLLIPOP);
        return useWhiteIcon ? R.mipmap.ic_stat_user : R.mipmap.ic_launcher;
    }

    private void orderStatus(String status) {
        switch (status) {
            case LOGIN_IN_OTHER_DEVICE:
                sendNotification(getMessage(status), Const.LOGIN_ACTIVITY);
                break;
            case STORE_ACCEPTED_YOUR_ORDER:
            case STORE_START_PREPARING_YOUR_ORDER:
            case STORE_READY_YOUR_ORDER:
            case DELIVERY_MAN_PICKED_ORDER:
            case DELIVERY_MAN_STARTED_DELIVERY:
            case DELIVERY_MAN_ARRIVED_AT_DESTINATION:
            case DELIVERY_MAN_COMPLETE_ORDER:
                sendNotification(getMessage(status), Const.ORDER_TRACK_ACTIVITY);
                sendBroadcast(Const.Action.ACTION_ORDER_STATUS);
                break;
            case ADMIN_APPROVED:
                sendNotification(getMessage(status), Const.HOME_ACTIVITY);
                sendBroadcast(Const.Action.ACTION_ADMIN_APPROVED);
                break;
            case ADMIN_DECLINE:
                sendNotification(getMessage(status), Const.HOME_ACTIVITY);
                sendBroadcast(Const.Action.ACTION_ADMIN_DECLINE);
                break;
            case DELIVERY_MAN_ACCEPTED:
            case DELIVERY_MAN_COMING:
            case DELIVERY_MAN_ARRIVED:
                break;
            case STORE_REJECTED_YOUR_ORDER:
            case STORE_CANCELLED_YOUR_ORDER:
                sendNotification(getMessage(status), Const.HOME_ACTIVITY);
                sendBroadcast(Const.Action.ACTION_ORDER_STATUS);
                break;
            default:
                sendNotification(status, Const.HOME_ACTIVITY);
                break;
        }

    }

    private String getMessage(String code) {
        String msg = "";
        String messageCode = Const.PUSH_MESSAGE_PREFIX + code;
        try {
            msg = this.getResources().getString(
                    this.getResources().getIdentifier(messageCode, Const.STRING,
                            this.getPackageName()));
        } catch (Resources.NotFoundException e) {
            msg = messageCode;
            AppLog.Log(FcmMessagingService.class.getName(), msg);
        }
        return msg;
    }


    private void sendBroadcast(String action) {
        sendBroadcast(new Intent(action));
    }

    private void sendBroadcastWithData(String action) {
        Intent intent = new Intent(action);
        Bundle bundle = new Bundle();
        bundle.putString(Const.Params.PUSH_DATA1, data.get(Const.Params.PUSH_DATA1));
        bundle.putString(Const.Params.PUSH_DATA2, data.get(Const.Params.PUSH_DATA2));
        intent.putExtra(Const.Params.NEW_ORDER, bundle);
        sendBroadcast(intent);
    }

    @Override
    public void onNewToken(String token) {
        super.onNewToken(token);
        AppLog.Log(FcmMessagingService.class.getSimpleName(), "FCM Token Refresh = " + token);
        PreferenceHelper.getInstance(this).putDeviceToken(token);
        if (!TextUtils.isEmpty(PreferenceHelper.getInstance(this).getSessionToken())) {
            upDeviceToken(token);
        }
    }

    private void upDeviceToken(String deviceToken) {

        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put(Const.Params.SERVER_TOKEN, PreferenceHelper.getInstance(this)
                    .getSessionToken());
            jsonObject.put(Const.Params.DEVICE_TOKEN, deviceToken);
            jsonObject.put(Const.Params.USER_ID, PreferenceHelper.getInstance(this).getUserId
                    ());
        } catch (JSONException e) {
            AppLog.handleThrowable(FcmMessagingService.class.getSimpleName(), e);
        }


        ApiInterface apiInterface = ApiClient.getClient().create(ApiInterface.class);
        Call<IsSuccessResponse> responseCall = apiInterface.updateDeviceToken(ApiClient
                .makeJSONRequestBody(jsonObject));
        responseCall.enqueue(new Callback<IsSuccessResponse>() {
            @Override
            public void onResponse(Call<IsSuccessResponse> call, Response<IsSuccessResponse>
                    response) {
                if (ParseContent.getInstance().isSuccessful(response)) {
                    if (!response.body().isSuccess()) {
                        AppLog.Log(FcmMessagingService.class.getSimpleName(), String.valueOf
                                (response
                                        .body().getErrorCode()));
                    }

                }

            }

            @Override
            public void onFailure(Call<IsSuccessResponse> call, Throwable t) {
                AppLog.handleThrowable(FcmMessagingService.class.getSimpleName(), t);
            }
        });

    }
}
